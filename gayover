#include <algorithm>
#include <cmath>
#include <iomanip>
#include <iostream>
#include <string>
#include <vector>

// const int BASE = 10;

namespace lab_bigint {

class bigint {
public:
    bigint() : number({0}) {
    }

    bigint(const std::string &digit){
        size_t start = 0;
        while (start < digit.length() && digit[start] == '0') {
            ++start;
        }
        if (start == digit.length()) {
            number.push_back(0);
        } else {
            size_t pos = digit.length();
            while (pos > start) {
                size_t chunk_start =
                    (pos >= base_length) ? pos - base_length : start;
                std::string chunk =
                    digit.substr(chunk_start, pos - chunk_start);
                int chunk_value = std::stoi(chunk);
                number.push_back(chunk_value);
                pos = chunk_start;
            }
        }
    }

    bigint(unsigned int digit){
        if (digit == 0) {
            number.push_back(0);
        } else {
            while (digit > 0) {
                number.push_back(digit % BASE);
                digit /= BASE;
            }
        }
    }

    friend std::ostream &operator<<(std::ostream &os, const bigint &num);

    friend bool operator==(const bigint &, const bigint &);
    friend bool operator!=(const bigint &, const bigint &);
    friend bool operator>(const bigint &, const bigint &);
    friend bool operator>=(const bigint &, const bigint &);
    friend bool operator<(const bigint &, const bigint &);
    friend bool operator<=(const bigint &, const bigint &);
    [[nodiscard]] std::string to_string() const;

    explicit operator unsigned int() const {
        int result = 0;
        int power = 1;
        for (const auto &digit : number) {
            result += digit * power;
            power *= BASE;
        }
        return result;
    }

    friend bigint operator+(const bigint &lhs, const bigint &rhs) {
        bigint result = lhs;
        result += rhs;
        return result;
    }

    bigint &operator+=(const bigint &other) {
        int carry = 0;
        for (size_t i = 0;
             i < std::max(this->number.size(), other.number.size()); ++i) {
            if (i >= this->number.size()) {
                this->number.push_back(0);
            }
            this->number[i] +=
                carry + (i < other.number.size() ? other.number[i] : 0);
            carry = this->number[i] / BASE;
            this->number[i] %= BASE;
        }
        if (carry != 0) {
            this->number.push_back(carry);
        }
        return *this;
    }

    friend bigint operator-(const bigint &lhs, const bigint &rhs) {
        bigint result = lhs;
        result -= rhs;
        return result;
    }

    bigint &operator-=(const bigint &other) {
        int carry = 0;
        for (size_t i = 0; i < this->number.size(); ++i) {
            this->number[i] += carry;
            if (i < other.number.size()) {
                this->number[i] -= other.number[i];
            }
            if (this->number[i] < 0) {
                this->number[i] += BASE;
                carry = -1;
            } else {
                carry = 0;
            }
        }
        while (this->number.back() == 0 && this->number.size() > 1) {
            this->number.pop_back();
        }
        return *this;
    }

    bigint operator++(int) {
        bigint result = *this;
        ++(*this);
        return result;
    }

    bigint operator--(int) {
        bigint result = *this;
        --(*this);
        return result;
    }

    bigint &operator++() {
        *this += 1;
        return *this;
    }

    bigint &operator--() {
        *this -= 1;
        return *this;
    }

private:
    static const size_t base_length;
    std::vector<int> number;
};

const size_t bigint::base_length = []() { return log10(BASE); }();

bool operator==(const bigint &lhs, const bigint &rhs) {
    return lhs.number == rhs.number;
}

bool operator!=(const bigint &lhs, const bigint &rhs) {
    return !(lhs == rhs);
}

bool operator<(const bigint &lhs, const bigint &rhs) {
    unsigned int n = lhs.number.size();
    unsigned int m = rhs.number.size();
    if (n != m) {
        return n < m;
    }
    while (n > 0) {
        --n;
        if (lhs.number[n] != rhs.number[n]) {
            return lhs.number[n] < rhs.number[n];
        }
    }
    return false;
}

bool operator>(const bigint &lhs, const bigint &rhs) {
    return rhs < lhs;
}

bool operator>=(const bigint &lhs, const bigint &rhs) {
    return !(lhs < rhs);
}

bool operator<=(const bigint &lhs, const bigint &rhs) {
    return !(lhs > rhs);
}

std::string bigint::to_string() const {
    std::string result;
    if (number.empty()) {
        return "0";
    }
    result = std::to_string(number.back());
    for (size_t i = number.size() - 1; i-- > 0;) {
        if (std::to_string(number[i]).length() < base_length) {
            result += std::string(
                base_length - std::to_string(number[i]).length(), '0'
            );
        }
        result += std::to_string(number[i]);
    }
    return result;
}

std::ostream &operator<<(std::ostream &os, const bigint &num) {
    if (num.number.empty()) {
        os << '0';
        return os;
    }
    std::string out_bigint = num.to_string();
    os << out_bigint;
    return os;
}

std::istream &operator>>(std::istream &is, bigint &num) {
    std::string new_bigint;
    is >> new_bigint;
    num = bigint(new_bigint);
    return is;
}

}  // namespace lab_bigint
